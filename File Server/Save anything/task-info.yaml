type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |-
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.io.File;
    import java.net.ConnectException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;

    import static org.hyperskill.hstest.common.Utils.sleep;

    public class FileServerTest extends StageTest<String> {

        private static final String onConnectExceptionMessage = "A client can't connect to the server!\n" +
            "Make sure the server handles connections and doesn't stop after one client connected.";

        public static final String serverDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "server" + File.separator + "data" + File.separator;

        public static final String clientDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "client" + File.separator + "data" + File.separator;

        private static String id;

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkServerStop),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkPaths),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testSaveAndGet),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testGetAfterServerRestart),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testDeleteFiles)
            );
        }

        // Test #1. Check if server stops
        CheckResult checkServerStop() {

            TestedProgram server = getServer();
            TestedProgram client;

            server.startInBackground();

            client = getClient();
            client.start();
            client.execute("exit");

            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                return CheckResult.wrong("You should stop the server if a client sends 'exit'");
            }

            return CheckResult.correct();
        }

        CheckResult checkPaths() {
            // Test #2. Check folders with data
            if (!Files.exists(Paths.get(serverDataPath)) || !Files.isDirectory(Paths.get(serverDataPath))) {
                return CheckResult.wrong("Can't find '/server/data' folder. You should store all saved files in it!\n" +
                    "The folder should be created even if the server wasn't started!");
            }

            if (!Files.exists(Paths.get(clientDataPath)) || !Files.isDirectory(Paths.get(clientDataPath))) {
                return CheckResult.wrong("Can't find '/client/data' folder. You should store all files you want to " +
                    "store on the server in it!\n" +
                    "The folder should be created even if the client wasn't started!");
            }
            return CheckResult.correct();
        }


        CheckResult testSaveAndGet() {

            TestedProgram server;
            TestedProgram client;

            Utils.createFiles(clientDataPath);

            // Test #3. Check saving file on the server
            server = getServer();
            server.startInBackground();

            File folder = new File(serverDataPath);
            int numOfFilesBeforeAdding = Utils.numExistingFiles(folder);

            client = getClient();
            client.start();
            client.execute("2\ntest_purpose_test1.txt");
            String clientOutput = client.execute("");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            id = Utils.findId(clientOutput);

            int numOfFilesAfterAdding = Utils.numExistingFiles(folder);

            if (numOfFilesAfterAdding == numOfFilesBeforeAdding) {
                return CheckResult.wrong("Once a client saved a file on the server number of files in /server/data/ should be changed!");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("2\ntest_purpose_test2.txt\ntest_purpose_newFile.txt");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            if (!Utils.isServerFileExists("test_purpose_newFile.txt")) {
                return CheckResult.wrong("Can't find a file after saving on the server." +
                    "You should save client's files in /server/data/ folder!");
            }

            String savedFileContent = Utils.getServerFileContent("test_purpose_newFile.txt");

            if (!savedFileContent.equals("test2")) {
                return CheckResult.wrong("A file after saving has wrong content!");
            }

            // Test #4. Check getting files
            client = getClient();
            client.start();
            clientOutput = client.execute("1\n1\ntest_purpose_notExist.txt");

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by name that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("1\n2\n" + (id + "511"));

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by ID that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get.txt");

            if (!Utils.isClientFileExists("test_purpose_get.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByNameFileContent = Utils.getClientFileContent("test_purpose_get.txt");
            if (!downloadedByNameFileContent.equals("test2")) {
                return CheckResult.wrong("After getting a file from the server by name it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_id.txt");

            if (!Utils.isClientFileExists("test_purpose_get_id.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByIdFileContent = Utils.getClientFileContent("test_purpose_get_id.txt");
            if (!downloadedByIdFileContent.equals("test1")) {
                return CheckResult.wrong("After getting a file from the server by ID it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testGetAfterServerRestart() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            server.startInBackground();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_by_id_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_by_id_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testDeleteFiles() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            File folder = new File(serverDataPath);
            int numOfFilesBeforeDeleting = Utils.numExistingFiles(folder);

            server.startInBackground();
            client.start();
            client.execute("3\n1\ntest_purpose_newFile.txt");

            sleep(2000);
            int numOfFilesAfterDeletingByName = Utils.numExistingFiles(folder);
            if (numOfFilesBeforeDeleting == numOfFilesAfterDeletingByName) {
                return CheckResult.wrong("Once a client deleted a file by name from the server, " +
                    "number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("3\n2\n" + id);

            sleep(2000);
            int numOfFilesAfterDeletingById = Utils.numExistingFiles(folder);
            if (numOfFilesAfterDeletingByName == numOfFilesAfterDeletingById) {
                return CheckResult.wrong("Once a client deleted a file by ID from the server, " +
                    "number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }


        @AfterClass
        public static void afterTestDeleteFiles() {
            Utils.deleteTestFiles();
        }

        public static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        public static TestedProgram getServer() {
            return new TestedProgram("server");
        }
    }


  learner_created: false
- name: test/Utils.java
  visible: false
  text: |+
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Arrays;
    import java.util.Objects;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Utils {
        public static String findId(String output) {
            Pattern pattern = Pattern.compile("ID = (\\d+)");
            Matcher matcher = pattern.matcher(output);

            if (matcher.find()) {
                int count = matcher.groupCount();
                if (count != 1) {
                    throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
                }
                return matcher.group(1);
            } else {
                throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
            }
        }

        public static void deleteTestFiles() {
            File dir = new File(FileServerTest.serverDataPath);

            File[] files = dir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().startsWith("test_purpose_")) {
                        boolean isDeleted = file.delete();
                        if (!isDeleted) {
                            throw new WrongAnswer("Can't delete test files. Maybe they are not closed!");
                        }
                    }
                }
            }

            File cdir = new File(FileServerTest.clientDataPath);
            files = cdir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().startsWith("test_purpose_")) {
                        boolean isDeleted = file.delete();
                        if (!isDeleted) {
                            throw new WrongAnswer("Can't delete test files. Maybe their input streams are not closed!");
                        }
                    }
                }
            }
        }

        public static void createFiles(String clientDataPath) {

            for (int i = 0; i < 2; i++) {
                try {
                    File file = new File(clientDataPath + String.format("test_purpose_test%d.txt", i + 1));
                    if (!file.exists()) file.createNewFile();
                    FileWriter writer = new FileWriter(file, false);
                    writer.write(String.format("test%d", i + 1));
                    writer.close();
                } catch (IOException e) {
                    throw new RuntimeException("Can't create test files!");
                }

            }
        }

        public static int numExistingFiles(File file) {
            File[] files = file.listFiles();
            if (files == null) {
                return 0;
            }
            return (int) Arrays.stream(files).filter(File::exists).count();
        }

        private static boolean isFileExists(String path) {
            return Files.exists(Paths.get(path)) && !Files.isDirectory(Paths.get(path));
        }

        public static boolean isClientFileExists(String fileName) {
            return isFileExists(FileServerTest.clientDataPath + fileName);
        }

        public static boolean isServerFileExists(String fileName) {
            return isFileExists(FileServerTest.serverDataPath + fileName);
        }

        public static String getServerFileContent(String fileName) {
            return getFileContent(FileServerTest.serverDataPath + fileName);
        }

        public static String getClientFileContent(String fileName) {
            return getFileContent(FileServerTest.clientDataPath + fileName);
        }

        private static String getFileContent(String fileName) {
            try {
                return new String(Files.readAllBytes(Paths.get(fileName)));
            } catch (IOException e) {
            }
            throw new WrongAnswer("Can't read files content.\n" +
                "Make sure you close input/output streams after reading or writing files!");
        }

    }


  learner_created: false
- name: src/client/Client.java
  visible: true
  text: |
    package client;

    import main.Data;

    import java.io.*;

    import java.net.Socket;
    import java.net.UnknownHostException;
    import java.time.format.SignStyle;
    import java.util.Scanner;

    public class Client {
        Scanner sc = new Scanner(System.in);

        public void start(String answer,String fileName,String date){

            try(Socket socket = new Socket(Data.SERVER_PATH,Data.SERVER_PORT);
                BufferedReader reader = new BufferedReader(
                        new InputStreamReader(
                                socket.getInputStream()
                        ));
                BufferedWriter writer = new BufferedWriter(
                        new OutputStreamWriter(
                                socket.getOutputStream()
                        )
                )
            )
            {
                System.out.println("The request was sent.");
                switch (answer){

                    case "1" -> {
                        writer.write( "GET " +  fileName + "\n");
                        writer.flush();

                        String response = reader.readLine();
                        String responseCode = response.substring(0,3);
                        System.out.println(responseCode.equals("200")
                                ? "The content of the file is:" + response.substring(3)
                                : "The response says that the file was not found!");

                    }
                    case "2" -> {
                        writer.write("PUT " + fileName + "\n");
                        writer.flush();
                        writer.write(date + "\n");
                        writer.flush();


                        String response = reader.readLine();
                        System.out.println(response.equals("200") ? "The response says that the file was created!"
                                : "The response says that creating the file was forbidden!");
                    }
                    case "3" -> {
                        writer.write("DELETE " + fileName + "\n");
                        writer.flush();

                        String response = reader.readLine();
                        System.out.println(response.equals("200") ? "The response says that the file was successfully deleted!"
                                : "The response says that the file was not found!");

                    }
                    case "exit" -> {
                        writer.write("exit\n");
                        writer.flush();
                    }
                }

            } catch (IOException e) {
                e.printStackTrace();
            }
        }







    }
  learner_created: true
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            /*String date = "";
            Client client = new Client();
            client.start("2","123.txt","This is the first file on the server!");
            client = new Client();
            client.start("1","123.txt",date);
            client = new Client();
            client.start("3","123.txt",date);
            client = new Client();
            client.start("3","123.txt",date);
            client = new Client();
            client.start("1","file_that_doesnt_exist.txt",date);
            client = new Client();
            client.start("exit","","");*/










            Client client = new Client();
            String answer;
            String date = " ";
            String fileName =" ";
            Scanner sc = new Scanner(System.in);

            System.out.println("Enter action (1 - get a file, 2 - create a file, 3 - delete a file):");
            answer = sc.nextLine();
            if (!answer.equals("exit")){
                System.out.println("Enter filename:");
                fileName = sc.nextLine();


                if (answer.equals("2")) {
                    System.out.println("Enter file content:");
                    date = sc.nextLine();
                }

            }
            client.start(answer,fileName,date);



        }
    }
  learner_created: true
- name: src/server/Server.java
  visible: true
  text: |+
    package server;
    import main.Data;

    import java.io.*;
    import java.net.*;
    public class Server {
        private Core core;
        private static Server instance;
        private BufferedWriter writer;
        private BufferedReader reader;

        private Server() {
            core = new Core();
            start();

        }
        public static Server getInstance() throws IOException {
            if (instance == null) {
                instance = new Server();
            }
            return instance;
        }

        private void run(Socket socket,ServerSocket serverSocket) throws IOException {
            createStreams(socket);
            String response = reader.readLine();
            String httpMethod = response.split(" ")[0];

            if (response.equals("exit")){
                exit(socket,serverSocket);
                return;
            }

            String fileName = response.split(" ")[1];

             switch (httpMethod){
                case "PUT" -> addFile(fileName);
                case "DELETE" -> deleteFile(fileName);
                case "GET" -> getFile(fileName);

            }

        }

        private void exit(Socket socket, ServerSocket serverSocket) {
            try {
                socket.close();
                serverSocket.close();
            } catch (IOException e) {
                throw new RuntimeException();
            }

        }


        private void accept(ServerSocket serverSocket){
            while (!serverSocket.isClosed()) {
                try (Socket socket = serverSocket.accept();)
                {
                    run(socket,serverSocket);

                } catch (IOException e) {
                    e.printStackTrace();
                }

            }

        }
        private void createStreams(Socket socket){
            try {
                writer = new BufferedWriter(
                        new OutputStreamWriter(
                                socket.getOutputStream()
                        )
                );
                reader = new BufferedReader(
                        new InputStreamReader(
                                socket.getInputStream()
                        )
                );

            } catch (IOException e) {
                throw new RuntimeException();
            }

        }

        private void start()  {
            try (ServerSocket serverSocket =
                         new ServerSocket(Data.SERVER_PORT, 50, InetAddress.getByName(Data.SERVER_PATH));)
            {
                accept(serverSocket);

            } catch (IOException e) {
               throw new RuntimeException();
            }
        }


        public void getFile(String fileName){
            String answer = (core.getFile(fileName));
            try {
                writer.write(answer + "\n");
                writer.flush();
            } catch (IOException e) {
                throw new RuntimeException();
            }


        }
        public void addFile(String fileName){
            try {
                String date = reader.readLine();
                writer.write(core.addFile(fileName,date) +"\n");
                writer.flush();
            } catch (IOException e) {
                throw new RuntimeException();
            }
        }
        public void deleteFile(String fileName){
            try {
                writer.write(core.deleteFile(fileName) + "\n");
                writer.flush();
            } catch (IOException e) {
                throw new RuntimeException();
            }
        }

    }














    class Session extends Thread {
        private final Socket socket;


        public Session(Socket socketForClient) {
            this.socket = socketForClient;
        }

        @Override
        public void run() {
            try (

                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream outputStream = new DataOutputStream(socket.getOutputStream());
            ) {
                String msg = input.readUTF();


                System.out.println(msg);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }


    }



  learner_created: true
- name: src/main/Data.java
  visible: true
  text: |
    package main;

    public class Data {
        public static final String SERVER_PATH = "127.0.0.1";
        public static final int SERVER_PORT = 9000;

    }
  learner_created: true
- name: src/server/Core.java
  visible: true
  text: |
    package server;

    import java.io.*;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;
    import java.util.Scanner;
    import java.util.regex.Pattern;

    public class Core {
        private final String dataPath = "C:\\Users\\vask\\IdeaProjects\\File Server\\File Server\\task\\src\\server\\data\\";
        private String separator = File.separator;
        private List<String > files;
        private final Pattern pattern;
        private static Core instance;


        public Core(){
            files = new ArrayList<>();
            pattern = Pattern.compile("file([0-9]|10)");
        };
        public static Core getInstance(){
            if (instance == null){
                instance = new Core();
            }
            return instance;
        }

        private boolean chekFileName(String fileName){
            return pattern.matcher(fileName).matches();
        }

        public String  addFile(String fileName,String date){
            File file = new File(dataPath + fileName);
            try {
                if (!file.exists() & file.createNewFile()){
                    writeInFile(file,date);
                    return "200";
                }

            } catch (IOException e) {
                throw new RuntimeException();
            }
            return "403";
        }



        public  String getFile(String fileName){
            File file = new File(dataPath + fileName);
            if (! file.exists())
                return "404";
            else return "200 " + readFile(file);
        }


        private void writeInFile(File file,String date){
            try (BufferedWriter writer = new BufferedWriter(
                    new FileWriter(file)
            )){
                writer.write(date);
                writer.flush();
            } catch (IOException e) {
                throw new RuntimeException();
            }

        }

        private String readFile(File file) {
            StringBuilder fileContents = new StringBuilder();
            try (Scanner scanner = new Scanner(file)){
                while (scanner.hasNextLine())
                    fileContents.append(scanner.nextLine());
            } catch (FileNotFoundException e) {
                throw new RuntimeException();
            }
            return fileContents.toString();
        }

        public String  deleteFile(String fileName){
            File file = new File(dataPath + fileName);
            if (file.exists() & file.delete())
                return "200";
            return "404";
        }



    }
  learner_created: true
- name: src/server/data/rt.txt
  visible: true
  learner_created: true
- name: src/server/data/er.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/52/stages/286/implement#comment
status: Unchecked
record: -1
